Introduction
  Class definition类定义
  Controller properties控制器属性
Actions, views and routing操作，视图和路由
Passing data to views传递数据到视图
Setting the navigation context设置导航上下文
Using AJAX handlers使用AJAX处理程序
  Back-end AJAX handlers后端AJAX处理程序
  Triggering AJAX requests触发AJAX请求

Introduction

October back-end implements the MVC pattern. Controllers manage back-end pages and implement various features like forms and lists. This article describes how to develop back-end controllers and how to configure controller behaviors.
10月的后端实现了MVC模式。 控制器管理后端页面并实现各种功能，如窗体和列表。 本文介绍如何开发后端控制器以及如何配置控制器的行为。

Each controller is represented with a PHP script which resides in the the /controllers subdirectory of a Plugin directory. Controller views are htm files that reside in the controller view directory. The controller view directory name matches the controller class name written in lowercase. The view directory can also contain controller configuration files. An example of a controller directory structure:
每个控制器都使用位于Plugin目录的/ controllers子目录中的PHP脚本来表示。 控制器视图是驻留在控制器视图目录中的htm文件。 控制器视图目录名称与控制器类名称以小写形式进行匹配。 视图目录还可以包含控制器配置文件。 控制器目录结构的一个例子：

plugins/
  acme/
    blog/
      controllers/
        users/                <=== Controller view directory
          _partial.htm        <=== Controller partial file
          config_form.yaml    <=== Controller config file
          index.htm           <=== Controller view file
        Users.php             <=== Controller class
      Plugin.php

Class definition类定义

Controller classes must extend the \Backend\Classes\Controller class. As any other plugin class, controllers should belong to the plugin namespace. The most basic representation of a Controller used inside a Plugin looks like this:
控制器类必须扩展\ Backend \ Classes \ Controller类。 作为任何其他插件类，控制器应属于插件名称空间。 在插件中使用的控制器的最基本的表示形式如下所示：

namespace Acme\Blog\Controllers;

class Posts extends \Backend\Classes\Controller {

    public function index()    // <=== Action method
    {

    }
}

Usually each controller implements functionality for working with a single type of data - like blog posts or categories. All back-end behaviors described below assume this convention.
通常每个控制器都实现了使用单一类型数据（如博文或类别）的功能。 下面描述的所有后端行为都采用这种惯例。

Controller properties控制器属性

The back-end controller base class defines a number of properties that allow to configure the page appearance and manage the page security:
后端控制器基类定义了允许配置页面外观并管理页面安全性的许多属性：

Property	       Description
$fatalError	      allows to store a fatal exception generated in an action method in order to display it in the view.
                  允许存储在动作方法中生成的致命异常，以便在视图中显示它。

$user	            contains a reference to the the back-end user object.
包含对后端用户对象的引用。

$suppressView	    allows to prevent the view display. Can be updated in the action method or in the controller constructor.
                  允许阻止视图显示。 可以在操作方法或控制器构造函数中进行更新。
$params	         an array of the routed parameters.
路由参数的数组。
$action	       a name of the action method being executed in the current request.
在当前请求中执行的动作方法的名称。

$publicActions	defines an array of actions available without the back-end user authentication. Can be overridden in the class definition.
定义了一组可用的操作，而不需要后端用户认证。 可以在类定义中被覆盖。

$requiredPermissions	permissions required to view this page. Can be set in the class definition or in the controller constructor. See users & permissions for details.
查看此页面所需的权限。 可以在类定义或控制器构造函数中设置。 查看用户和权限的详细信息。

$pageTitle	  sets the page title. Can be set in the action method.
设置页面标题。 可以在action方法中设置。

$bodyClass	body class property used for customizing the layout. Can be set in the controller constructor or action method.
用于自定义布局的body类属性。 可以在控制器构造函数或动作方法中设置。

$guarded	controller specific methods which cannot be called as actions. Can be extended in the controller constructor.
控制器特定的方法，不能被称为动作。 可以在控制器构造函数中扩展。

$layout	specify a custom layout for the controller views (see layouts below).
指定控制器视图的自定义布局（请参阅下面的布局）

Actions, views and routing
操作，视图和路由

Public controller methods, called actions are coupled to view files which represent the page corresponding the action. Back-end view files use PHP syntax. Example of the index.htm view file contents, corresponding to the index action method:
公共控制器方法（称为动作）被耦合到查看表示对应于动作的页面的文件。 后端视图文件使用PHP语法。 index.htm的示例视图文件内容，对应于索引操作方法：

<h1>Hello World</h1>
URL of this page is made up of the author name, plugin name, controller name and action name.
这个页面的URL由作者名、插件名、控制器名和操作名组成。

backend/[author name]/[plugin name]/[controller name]/[action name]
The above Controller results in the following:
上述控制器产生以下结果：
http://example.com/backend/acme/blog/users/index


Passing data to views
将数据传递给视图

Usually when you build the back-end user interface you can use the controller behaviors, described below, and don't need to pass any variables directly to your views. However you can do it with the controller's $vars property:
通常当您构建后端用户界面时，您可以使用下面描述的控制器行为，并且不需要将任何变量直接传递给您的视图。 但是，您可以使用控制器的$ vars属性来执行此操作：
$this->vars['var'] = 'value';
The variables passed with the $vars property can be accessed in the view code directly:

<p>The variable value is <?= $var ?></p>
Setting the navigation context

Plugins can register the back-end navigation menus and submenus in the plugin registration file. The navigation context determines what back-end menu and submenu are active for the current back-end page. You can set the navigation context with the BackendMenu class:

BackendMenu::setContext('Acme.Blog', 'blog', 'categories');
The first parameter specifies the author and plugin names. The second parameter sets the menu code. The optional third parameter specifies the submenu code. Usually you call the BackendMenu::setContext in the controller constructor.

namespace Acme\Blog\Controllers;

class Categories extends \Backend\Classes\Controller {

public function __construct()
{
    parent::__construct();

    BackendMenu::setContext('Acme.Blog', 'blog', 'categories');
}
You can set the title of the back-end page with the $pageTitle property of the controller class (note that the form and list behaviors can do it for you):

$this->pageTitle = 'Blog categories';
Using AJAX handlers

The back-end AJAX framework uses the same AJAX library as the front-end pages. The library is loaded automatically on the back-end pages.

Back-end AJAX handlers

The back-end AJAX handlers can be defined in the controller class or widgets. In the controller class the AJAX handlers are defined as public methods with the name starting with "on" string: onCreateTemplate, onGetTemplateList, etc.

Back-end AJAX handlers can return an array of data, throw an exception or redirect to another page (see AJAX event handlers). You can use $this->vars to set variables and the controller's makePartial method to render a partial and return its contents as a part of the response data.

public function onOpenTemplate()
{
    if (Request::input('someVar') != 'someValue') {
        throw new ApplicationException('Invalid value');
    }

    $this->vars['foo'] = 'bar';

    return [
        'partialContents' => $this->makePartial('some-partial')
    ];
}
Triggering AJAX requests

The AJAX request can be triggered with the data attributes API or the JavaScript API. Please see the front-end AJAX library for details. The following example shows how to trigger a request with a back-end button.

<button
    type="button"
    data-request="onDoSomething"
    class="btn btn-default">
    Do something
</button>
Note: You can specifically target the AJAX handler of a widget using a prefix widget::onName. See the widget AJAX handler article for more details.