Localization directory and file structure
 本地化目录和文件结构

Accessing localization strings
访问本地化字符串

Overriding localization strings
覆盖本地化字符串

Plugins can have localization files in the lang subdirectory of the plugin directory. Plugins' localization files are registered automatically. The localization strings are supported automatically in the back-end user interface menus, form labels, etc. - if you provide the localization key instead of a real string, the system will try to load it from the localization file. In other cases you need to load the localization string with the API.
插件可以在插件目录的lang子目录中具有本地化文件。 插件的本地化文件被自动注册。 本地化字符串在后端用户界面菜单，表单标签等中自动支持 - 如果提供本地化键而不是真正的字符串，系统将尝试从本地化文件加载它。 在其他情况下，您需要使用API加载本地化字符串。

Note: For translating front-end content, there are plugins that can be used for this purpose.

注意：对于翻译前端内容，有可用于此目的的插件

Localization directory and file structure本地化目录和文件结构

Below is an example of the plugin's lang directory:
以下是插件的lang目录的示例：

plugins/
  acme/
    todo/             <=== Plugin directory
      lang/           <=== Localization directory
        en/           <=== Language directory
          lang.php    <=== Localization file
        fr/
          lang.php
The lang.php file should define and return an array of any depth, for example:
lang.php文件应该定义并返回任何深度的数组，例如：

<?php

return [
    'app' => [
        'name' => 'OctoberCMS',
        'tagline' => 'Getting back to basics'
    ]
];

Accessing localization strings
访问本地化字符串

The localization strings can be loaded with the Lang class. The parameter it accepts is the localization key string that consists of the plugin name, the localization file name and the path to the localization string inside the array returned from the file. The next example loads the app.name string from the plugins/acme/blog/lang/en/lang.php file (the language is set with the locale parameter in the config/app.php configuration file):
本地化字符串可以加载Lang类。 它接受的参数是由插件名称，本地化文件名和从文件返回的数组中的本地化字符串的路径组成的本地化键字符串。 下一个示例从plugins / acme / blog / lang / en / lang.php文件中加载app.name字符串（该语言使用config / app.php配置文件中的locale参数设置）：

echo Lang::get('acme.blog::lang.app.name');

Overriding localization strings
覆盖本地化字符串

System users can override plugin localization strings without altering the plugins' files. This is done by adding localization files to the lang directory. For example, to override the lang.php file of the acme/blog plugin you should create the file in the following location:
系统用户可以在不改变插件文件的情况下覆盖插件本地化字符串。 这通过将本地化文件添加到lang目录中来完成。 例如，要覆盖acme / blog插件的lang.php文件，您应该在以下位置创建文件：

lang/               <=== App localization directory
  en/               <=== Language directory
    acme/           <=== Plugin / Module directory
      blog/         <===^
        lang.php    <=== Localization override file
The file could contain only strings you want to override, there is no need to replace the entire file. Example:
该文件只能包含要覆盖的字符串，不需要更换整个文件。 例：
<?php

return [
    'app' => [
        'name' => 'OctoberCMS!'
    ]
];