Introduction
Database settings数据库设置
    Writing to a settings model写入设置模型
    Reading from a settings model从设置模型中读取
Back-end settings pages后端设置页面
    Settings link registration设置链接注册
    Setting the page navigation context设置页面导航上下文
File-based configuration基于文件的配置

Introduction

There are two ways to configure plugins - with back-end settings forms and with configuration files. Using database settings with back-end pages provide a better user experience, but they carry more overhead for the initial development. File-based configuration is suitable for configuration that is rarely modified.
配置插件有两种方法 - 后端设置表单和配置文件。 使用数据库设置与后端页面提供更好的用户体验，但它们为开发开发带来更多的开销。 基于文件的配置适用于很少修改的配置。

Database settings数据库设置

You can create models for storing settings in the database by implementing the SettingsModel behavior in a model class. This model can be used directly for creating the back-end settings form. You don't need to create a database table and a controller for creating the back-end settings forms based on the settings model.
您可以通过在模型类中实现SettingsModel行为来创建用于在数据库中存储设置的模型。 该模型可以直接用于创建后端设置表单。 您不需要创建一个数据库表和控制器来创建基于设置模型的后台设置表单。

The settings model classes should extend the Model class and implement the System.Behaviors.SettingsModel behavior. The settings models, like any other models, should be defined in the models subdirectory of the plugin directory. The model from the next example should be defined in the plugins/acme/demo/models/Settings.php script.
设置模型类应该扩展Model类并实现System.Behaviors.SettingsModel行为。 这些设置模型和任何其他模型一样，应该在plugin目录的models子目录中定义。 下一个示例中的模型应该在plugins / acme / demo / models / Settings.php脚本中定义。
<?php namespace Acme\Demo\Models;

use Model;

class Settings extends Model
{
    public $implement = ['System.Behaviors.SettingsModel'];

    // A unique code
    public $settingsCode = 'acme_demo_settings';

    // Reference to field configuration
    public $settingsFields = 'fields.yaml';
}

The $settingsCode property is required for settings models. It defines the unique settings key which is used for saving the settings to the database.
设置模型需要$ settingsCode属性。 它定义了用于将设置保存到数据库的唯一设置键。

The $settingsFields property is required if are going to build a back-end settings form based on the model. The property specifies a name of the YAML file containing the form fields definition. The form fields are described in the Backend forms article. The YAML file should be placed to the directory with the name matching the model class name in lowercase. For the model from the previous example the directory structure would look like this:
如果要基于模型构建后端设置表单，则$ settingsFields属性是必需的。 该属性指定包含表单字段定义的YAML文件的名称。 表单字段在后端表单文章中描述。 应将YAML文件放置到名称与模型类名称小写的目录中。 对于前面示例中的模型，目录结构将如下所示：

plugins/
  acme/
    demo/
      models/
        settings/        <=== Model files directory
          fields.yaml    <=== Model form fields
        Settings.php     <=== Model script
Settings models can be registered to appear on the back-end Settings page, but it is not a requirement - you can set and read settings values like any other model.
可以注册设置模型以显示在后端设置页面上，但不是必需的 - 您可以设置和读取任何其他型号的设置值。

Writing to a settings model

The settings model has the static set method that allows to save individual or multiple values. You can also use the standard model features for setting the model properties and saving the model.

设置模型具有允许保存单个或多个值的静态集合方法。 您还可以使用标准模型特征来设置模型属性并保存模型。

use Acme\Demo\Models\Settings;

...

// Set a single value
Settings::set('api_key', 'ABCD');

// Set an array of values
Settings::set(['api_key' => 'ABCD']);

// Set object values
$settings = Settings::instance();
$settings->api_key = 'ABCD';
$settings->save();
Reading from a settings model

The settings model has the static get method that enables you to load individual properties. Also, when you instantiate a model with the instance method, it loads the properties from the database and you can access them directly.

// Outputs: ABCD
echo Settings::instance()->api_key;

// Get a single value
echo Settings::get('api_key');

// Get a value and return a default value if it doesn't exist
echo Settings::get('is_activated', true);
Back-end settings pages

The back-end contains a dedicated area for housing settings and configuration, it can be accessed by clicking the Settings link in the main menu. The Settings page contains a list of links to the configuration pages registered by the system and other plugins.
后端包含用于设置和配置的专用区域，可以通过单击主菜单中的“设置”链接进行访问。 “设置”页面包含系统和其他插件注册的配置页面的链接列表。

Settings link registration

The back-end settings navigation links can be extended by overriding the registerSettings method inside the Plugin registration class. When you create a configuration link you have two options - create a link to a specific back-end page, or create a link to a settings model. The next example shows how to create a link to a back-end page.
可以通过覆盖插件注册类中的registerSettings方法来扩展后端设置导航链接。 创建配置链接时，您有两个选项 - 创建指向特定后端页面的链接，或创建指向设置模型的链接。 下一个示例显示如何创建到后端页面的链接。

public function registerSettings()
{
    return [
        'location' => [
            'label'       => 'Locations',
            'description' => 'Manage available user countries and states.',
            'category'    => 'Users',
            'icon'        => 'icon-globe',
            'url'         => Backend::url('acme/user/locations'),
            'order'       => 500,
            'keywords'    => 'geography place placement'
        ]
    ];
}

Note: Back-end settings pages should set the settings context in order to mark the corresponding settings menu item active in the System page sidebar. Settings context for settings models is detected automatically.
注意：后端设置页面应设置设置上下文，以便在系统页面侧边栏中标记相应的设置菜单项活动。 自动检测设置模型的设置上下文。

The following example creates a link to a settings model. Settings models is a part of the settings API which is described above in the Database settings section.
以下示例创建一个指向设置模型的链接。 设置模型是上述“数据库设置”部分中描述的设置API的一部分。

public function registerSettings()
{
    return [
        'settings' => [
            'label'       => 'User Settings',
            'description' => 'Manage user based settings.',
            'category'    => 'Users',
            'icon'        => 'icon-cog',
            'class'       => 'Acme\User\Models\Settings',
            'order'       => 500,
            'keywords'    => 'security location',
            'permissions' => ['acme.users.access_settings']
        ]
    ];
}
The optional keywords parameter is used by the settings search feature. If keywords are not provided, the search uses only the settings item label and description.

Setting the page navigation context

Just like setting navigation context in the controller, Back-end settings pages should set the settings navigation context. It's required in order to mark the current settings link in the System page sidebar as active. Use the System\Classes\SettingsManager class to set the settings context. Usually it could be done in the controller constructor:
就像在控制器中设置导航上下文一样，后端设置页面应设置设置导航上下文。 为了将系统页面侧边栏中的当前设置链接标记为活动是必需的。 使用System \ Classes \ SettingsManager类设置设置上下文。 通常可以在控制器构造函数中完成：

public function __construct()
{
    parent::__construct();

    [...]

    BackendMenu::setContext('October.System', 'system', 'settings');
    SettingsManager::setContext('You.Plugin', 'settings');
}
The first argument of the setContext method is the settings item owner in the following format: author.plugin. The second argument is the setting name, the same as you provided when registering the back-end settings page.
setContext方法的第一个参数是以下格式的设置项所有者：author.plugin。 第二个参数是设置名称，与注册后端设置页面时提供的设置名称相同。

File-based configuration
基于文件的配置

Plugins can have a configuration file config.php in the config subdirectory of the plugin directory. The configuration files are PHP scripts that define and return an array. Example configuration file plugins/acme/demo/config/config.php:
插件可以在plugin目录的config子目录中配置一个config.php文件。 配置文件是定义和返回数组的PHP脚本。 示例配置文件plugins / acme / demo / config / config.php：

<?php

return [
    'maxItems' => 10,
    'display' => 5
];

Use the Config class for accessing the configuration values defined in the configuration file. The Config::get($name, $default = null) method accepts the plugin and the parameter name in the following format: Acme.Demo::maxItems. The second optional parameter defines the default value to return if the configuration parameter doesn't exist. Example:
使用Config类访问配置文件中定义的配置值。 Config :: get（$ name，$ default = null）方法接受插件和参数名称，格式如下：Acme.Demo :: maxItems。 第二个可选参数定义了如果配置参数不存在则返回的默认值。 例：
use Config;

...

$maxItems = Config::get('acme.demo::maxItems', 50);

A plugin configuration can be overridden by the application by creating a configuration file config/author/plugin/config.php, for example config/acme/todo/config.php, or config/acme/todo/dev/config.php for different environment. Inside the overridden configuration file you can return only values you want to override:
应用程序可以通过创建配置文件config / author / plugin / config.php（例如config / acme / todo / config.php）或config / acme / todo / dev / config.php来覆盖插件配置 环境。 在重写的配置文件中，您只能返回要覆盖的值：
<?php

return [
    'maxItems' => 20
];

If you want to use seperate configurations across different environments (eg: dev, production), simply create another file in config/author/plugin/environment/config.php. Replace environment with the environment name. This will be merged with config/author/plugin/config.php.
如果要在不同的环境中使用单独的配置（例如：dev，production），只需在config / author / plugin / environment / config.php中创建另一个文件即可。 用环境名称替换环境。 这将与config / author / plugin / config.php合并。

Example:

config/author/plugin/production/config.php:

<?php

return [
    'maxItems' => 25
];
This will set maxItems to 25 when APP_ENV is set to production.