Introduction介绍
    Directory structure目录结构
    Plugin namespaces插件命名空间
Registration file注册档案
    Supported methods支持的方法
    Basic plugin information基本插件信息
Routing and initialization路由和初始化
Dependency definitions依赖性定义延
Extending Twig长树枝
Navigation menus导航菜单
Registering middleware注册中间件
Elevated permissions提升的权限

Introduction

Plugins are the foundation for adding new features to the CMS by extending it. This article describes the component registration. The registration process allows plugins to declare their features such as components or back-end menus and pages. Some examples of what a plugin can do:
插件是通过扩展CMS向CMS添加新功能的基础。 本文介绍了组件注册。 注册过程允许插件声明其功能，如组件或后端菜单和页面。 例子：


1.Define components. 定义组件。
2.Define user permissions. 定义用户权限
3.Add settings pages, menu items, lists and forms.添加设置页面，菜单项，列表和表单。
4.Create database table structures and seed data.创建数据库表结构和填充数据
5.Alter functionality of the core or other plugins.改变核心功能或其他插件的功能。
6.Provide classes, back-end controllers, views, assets, and other files.提供类，后端控制器，视图，资产和其他文件。

Directory structure

Plugins reside in the /plugins subdirectory of the application directory. An example of a plugin directory structure:
插件文件夹建在应用程序目录的/ plugins子目录中。 例子：

plugins/
  acme/              <=== Author name作者名
    blog/            <=== Plugin name插件名
      classes/
      components/
      controllers/
      models/
      updates/
      ...
      Plugin.php     <=== Plugin registration file


Not all plugin directories are required. The only required file is the Plugin.php described below. If your plugin provides only a single component, your plugin directory could be much simpler, like this:
并不是所有的插件目录都是必需的。 唯一需要的文件是下面描述的Plugin.php。 如果您的插件仅提供一个组件，您的插件目录可能会更简单，如下所示：
plugins/
  acme/              <=== Author name
    blog/            <=== Plugin name
      components/
      Plugin.php     <=== Plugin registration file
Note: if you are developing a plugin for the Marketplace, the updates/version.yaml file is required.
注意：如果您正在为Marketplace开发插件，则 updates/version.yaml文件是必需存在的。


Plugin namespaces插件命名空间

Plugin namespaces are very important, especially if you are going to publish your plugins on the October Marketplace. When you register as an author on the Marketplace you will be asked for the author code which should be used as a root namespace for all your plugins. You can specify the author code only once, when you register. The default author code offered by the Marketplace consists of the author first and last name: JohnSmith. The code cannot be changed after you register. All your plugin namespaces should be defined under the root namespace, for example \JohnSmith\Blog.

插件命名空间非常重要，特别是如果要在10月Marketplace发布您的插件。 当您在Marketplace上注册作者时，系统会要求您输入作为所有插件的根名称空间的作者代码。 您可以在注册时指定作者代码一次。 Marketplace提供的默认作者代码由作者姓名和名字组成：JohnSmith。 注册后无法更改代码。 所有插件名称空间都应该在根命名空间下定义，例如\ JohnSmith \ Blog。

Registration file

The Plugin.php file, called the Plugin registration file, is an initialization script that declares a plugin's core functions and information. Registration files can provide the following:
Plugin.php文件称为插件注册文件，它是一个初始化脚本，用于声明插件的核心功能和信息。 注册文件可以提供以下内容：

Information about the plugin, its name, and author.
有关插件，其名称和作者的信息。
Registration methods for extending the CMS.
扩展CMS的注册方法.
Registration scripts should use the plugin namespace. The registration script should define a class with the name Plugin that extends the \System\Classes\PluginBase class. The only required method of the plugin registration class is pluginDetails. An example Plugin registration file:
注册脚本应该使用插件名称空间。 注册脚本应该定义一个名为Plugin的类，该类扩展了\ System \ Classes \ PluginBase类。 插件注册类唯一必需的方法是pluginDetails。 插件注册文件示例：


namespace Acme\Blog;

class Plugin extends \System\Classes\PluginBase
{
    public function pluginDetails()
    {
        return [
            'name' => 'Blog Plugin',
            'description' => 'Provides some really cool blog features.',
            'author' => 'ACME Corporation',
            'icon' => 'icon-leaf'
        ];
    }

    public function registerComponents()
    {
        return [
            'Acme\Blog\Components\Post' => 'blogPost'
        ];
    }
}

Supported methods

The following methods are supported in the plugin registration class:
插件注册类中支持以下方法：

Method	Description方法说明

pluginDetails()	returns information about the plugin.返回有关插件的信息。
register()	register method, called when the plugin is first registered.寄存器方法，当插件首次注册时调用。
boot()	boot method, called right before the request route.引导方法，在请求路由之前调用。
registerMarkupTags()	registers additional markup tags that can be used in the CMS.注册可在CMS中使用的其他标记标签。
registerComponents()	registers any front-end components used by this plugin.注册可在CMS中使用的其他标记标签。
registerNavigation()	registers back-end navigation menu items for this plugin.注册此插件的后端导航菜单项。
registerPermissions()	registers any back-end permissions used by this plugin.注册此插件使用的任何后端权限。
registerSettings()	registers any back-end configuration links used by this plugin.注册此插件使用的任何后端配置链接。
registerFormWidgets()	registers any back-end form widgets supplied by this plugin.注册此插件提供的任何后端窗体小部件。
registerReportWidgets()	registers any back-end report widgets, including the dashboard widgets.注册任何后端报表小部件，包括仪表板小部件。
registerListColumnTypes()	registers any custom list column types supplied by this plugin.注册此插件提供的任何自定义列表列类型。
registerMailTemplates()	registers any mail view templates supplied by this plugin.注册此插件提供的任何邮件视图模板。
registerSchedule()	registers scheduled tasks that are executed on a regular basis.注册定期执行的计划任务。

Basic plugin information基本插件信息

The pluginDetails is a required method of the plugin registration class. It should return an array containing the following keys:
pluginDetails方法是插件注册类的必需方法。 它应该返回一个包含以下键的数组：

Key	            Description
name	         the plugin name, required.插件名称，必需。
description	     the plugin description, required.插件描述，需要
author	         the plugin author name, required.插件作者，需要
icon	       a name of the plugin icon. The full list of available icons can be found in the UI documentation. Any icon names provided by this font are valid, for example icon-glass, icon-music.插件图标的名称。 可用图标的完整列表可以在UI文档中找到。 此字体提供的任何图标名称都是有效的，例如图标玻璃，图标音乐。
iconSvg	    an SVG icon to be used in place of the standard icon, optional. The SVG icon should be a rectangle and can support colors.用于代替标准图标的SVG图标，可选。 SVG图标应该是一个矩形，可以支持颜色。
homepage	A link to the author's website address, optional.链接到作者的网站地址，可选。

Routing and initialization路由和初始化

Plugin registration files can contain two methods boot and register. With these methods you can do anything you like, like register routes or attach handlers to events.
插件注册文件可以包含两种方法启动和注册。 使用这些方法，您可以执行任何您喜欢的操作，例如注册路由或将事件附加到处理程序。

The register method is called immediately when the plugin is registered. The boot method is called right before a request is routed. So if your actions rely on another plugin, you should use the boot method. For example, inside the boot method you can extend models:
插件注册时立即调用寄存器方法。 在路由请求之前调用引导方法。 因此，如果您的操作依赖于另一个插件，则应使用引导方法。 例如，在引导方法中可以扩展模型：

public function boot()
{
    User::extend(function($model) {
        $model->hasOne['author'] = ['Acme\Blog\Models\Author'];
    });
}

Note: The boot and register methods are not called during the update process to protect the system from critical errors. To overcome this limitation use elevated permissions.
注意：在更新过程中不会调用引导和注册方法来保护系统免受严重错误。 为了克服这个限制，使用提升的权限。

Plugins can also supply a file named routes.php that contain custom routing logic, as defined in the router service. For example:
插件还可以提供一个名为routes.php的文件，其中包含路由器服务中定义的自定义路由逻辑。 例如：

Route::group(['prefix' => 'api_acme_blog'], function() {

    Route::get('cleanup_posts', function(){ return Posts::cleanUp(); });

});

Dependency definitions依赖性定义

A plugin can depend upon other plugins by defining a $require property in the Plugin registration file, the property should contain an array of plugin names that are considered requirements. A plugin that depends on the Acme.User plugin can declare this requirement in the following way:
插件可以通过在Plugin注册文件中定义$ require属性来取决于其他插件，该属性应该包含被认为是需求的插件名称数组。 依赖于Acme.User插件的插件可以通过以下方式声明此要求：

namespace Acme\Blog;

class Plugin extends \System\Classes\PluginBase
{
    /**
     * @var array Plugin dependencies
     */
    public $require = ['Acme.User'];

    [...]
}

Dependency definitions will affect how the plugin operates and how the update process applies updates. The installation process will attempt to install any dependencies automatically, however if a plugin is detected in the system without any of its dependencies it will be disabled to prevent system errors.
依赖关系定义将影响插件的运行方式以及更新过程如何应用更新。 安装过程将尝试自动安装任何依赖项，但是如果在系统中检测到插件没有任何依赖关系，那么它将被禁用以防止系统错误。

Dependency definitions can be complex but care should be taken to prevent circular references. The dependency graph should always be directed and a circular dependency is considered a design error.
依赖性定义可能很复杂，但应注意防止循环引用。 依赖图应该始终被引导，循环依赖被认为是设计错误。


Extending Twig

Custom Twig filters and functions can be registered in the CMS with the registerMarkupTags method of the plugin registration class. The next example registers two Twig filters and two functions.

可以使用插件注册类的registerMarkupTags方法在CMS中注册自定义Twig过滤器和功能。 下一个示例注册了两个Twig滤波器和两个功能。

public function registerMarkupTags()
{
    return [
        'filters' => [
            // A global function, i.e str_plural()
            'plural' => 'str_plural',

            // A local method, i.e $this->makeTextAllCaps()
            'uppercase' => [$this, 'makeTextAllCaps']
        ],
        'functions' => [
            // A static method call, i.e Form::open()
            'form_open' => ['October\Rain\Html\Form', 'open'],

            // Using an inline closure
            'helloWorld' => function() { return 'Hello World!'; }
        ]
    ];
}

public function makeTextAllCaps($text)
{
    return strtoupper($text);
}


Navigation menus导航菜单

Plugins can extend the back-end navigation menus by overriding the registerNavigation method of the Plugin registration class. This section shows you how to add menu items to the back-end navigation area. An example of registering a top-level navigation menu item with two sub-menu items:
插件可以通过覆盖插件注册类的registerNavigation方法来扩展后端导航菜单。 本节介绍如何将菜单项添加到后端导航区域。 注册具有两个子菜单项的顶级导航菜单项的示例：

public function registerNavigation()
{
    return [
        'blog' => [
            'label'       => 'Blog',
            'url'         => Backend::url('acme/blog/posts'),
            'icon'        => 'icon-pencil',
            'permissions' => ['acme.blog.*'],
            'order'       => 500,

            'sideMenu' => [
                'posts' => [
                    'label'       => 'Posts',
                    'icon'        => 'icon-copy',
                    'url'         => Backend::url('acme/blog/posts'),
                    'permissions' => ['acme.blog.access_posts']
                ],
                'categories' => [
                    'label'       => 'Categories',
                    'icon'        => 'icon-copy',
                    'url'         => Backend::url('acme/blog/categories'),
                    'permissions' => ['acme.blog.access_categories']
                ]
            ]
        ]
    ];
}
When you register the back-end navigation you can use localization strings for the label values. Back-end navigation can also be controlled by the permissions values and correspond to defined back-end user permissions.
注册后端导航时，您可以使用本地化字符串作为标签值。 后端导航也可以由权限值控制，并对应于定义的后端用户权限。

To make the sub-menu items visible, you may set the navigation context in the back-end controller using the BackendMenu::setContext method. This will make the parent menu item active and display the children in the side menu.
要使子菜单项可见，您可以使用BackendMenu :: setContext方法在后端控制器中设置导航上下文。 这将使父菜单项活动，并在侧面菜单中显示孩子。

Registering middleware注册中间件

To register a custom middleware you can use the following call inside your boot method to extend a Controller class that you wish to add the middleware to.
要注册自定义中间件，您可以在引导方法中使用以下调用来扩展要添加中间件的Controller类。

public function boot()
{
    Cms\Classes\CmsController::extend(function($controller) {
        $controller->middleware('Path\To\Custom\Middleware');
    });
}

Alternatively, you can push it directly into the Kernel via the following.或者，您可以通过以下方式将其直接推入内核。

public function boot()
{
    // Add a new middleware to beginning of the stack.
    $this->app['Illuminate\Contracts\Http\Kernel']
         ->prependMiddleware('Path\To\Custom\Middleware');

    // Add a new middleware to end of the stack.
    $this->app['Illuminate\Contracts\Http\Kernel']
         ->pushMiddleware('Path\To\Custom\Middleware');
}

Elevated permissions提升的权限

By default plugins are restricted from accessing certain areas of the system. This is to prevent critical errors that may lock an administrator out from the back-end. When these areas are accessed without elevated permissions, the boot and register initialization methods for the plugin will not fire.
默认情况下，插件不能访问系统的某些区域。 这是为了防止可能将管理员从后端锁定的严重错误。 当这些区域在没有提升权限的情况下访问时，插件的启动和注册初始化方法将不会触发。

Request	                 Description
/combine	               the asset combiner generator URL资产组合器生成器URL
/backend/system/updates	    the site updates context更新站点更新上下文
/backend/system/install	    the installer path安装安装程序路径
/backend/backend/auth	  the backend authentication path (login, logout)后端身份验证路径（登录，注销）
october:up	             the CLI command that runs all pending migrations运行所有挂起的迁移的CLI命令
october:update	         the CLI command that triggers the update process更新触发更新程序的CLI命令

Define the $elevated property to grant elevated permissions for your plugin.定义$ Elev属性以为插件提供更高的权限。

/**
 * @var bool Plugin requires elevated permissions.
 */
public $elevated = true;
